input {
  file {
    path => "D:/conflog/security.log"  # Adjust the log file path
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => multiline {
      pattern => "^<\d+>"  # To capture log entries starting with "<14>" or similar
      negate => true
      what => "previous"
    }
  }
}

filter {
  # Parse the log message using a Grok filter
  grok {
    match => { "message" => "\<%{NUMBER:syslog_pri}\>%{NUMBER:syslog_version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service} %{NUMBER:pid}\s-\s-\salertname=\"%{DATA:description}\"\scomputername=\"%{DATA:hostname}\"\scomputerip=\"%{IPV4:source_ip}\"\sseverity=\"%{NUMBER:severity}\"" }
  }

  # Map the severity to a human-readable value
  mutate {
    convert => { "severity" => "integer" }
  }

  # Add a new field for severity level text
  mutate {
    add_field => {
      "severity_level" => "%{severity}"
    }
  }

  # Conditional to convert severity numeric value to text
  mutate {
    replace => {
      "severity" => "%{severity_level}"
    }
  }

  # Convert severity value to a readable text (High/Medium/Low)
  ruby {
    code => '
      if event.get("severity").to_i == 1
        event.set("severity", "High")
      elsif event.get("severity").to_i == 2
        event.set("severity", "Medium")
      else
        event.set("severity", "Low")
      end
    '
  }
}

output {
  # Output in JSON format
  stdout {
    codec => json_lines
  }

  # Optionally, send the output to Elasticsearch
  # elasticsearch {
  #   hosts => ["http://localhost:9200"]
  #   index => "security_logs"
  # }
}
